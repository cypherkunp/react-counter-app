{"version":3,"sources":["components/counter.jsx","components/counters.jsx","components/navbar.jsx","App.js","serviceWorker.js","index.js"],"names":["Counter","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","console","log","classes","props","counter","value","_this2","react_default","a","createElement","className","getBadgeClasses","formatCount","onClick","onIncrement","getRemoveButtonClass","onDecrement","onDelete","Component","Counters","_this$props","onReset","onAdd","counters","id","map","components_counter","key","Navbar","_ref","totalCounters","totalCount","href","App","state","idIndex","handleReset","c","setState","handleIncrement","toConsumableArray","index","indexOf","objectSpread","handleDecrement","handleDelete","filter","handleAdd","push","forEach","navbar","length","components_counters","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.682621bc.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Counter extends Component {\r\n  constructor() {\r\n    super();\r\n    console.log(`Counter: - constructor()`);\r\n  }\r\n\r\n  componentDidMount() {\r\n    console.log('Counter - componentDidMount()');\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    console.log('Counter - componentDidUpdate()');\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    console.log('Counter - componentWillUnmount()');\r\n  }\r\n\r\n  getBadgeClasses() {\r\n    let classes = 'badge m-2 ';\r\n    classes += this.props.counter.value === 0 ? 'badge-warning' : 'badge-primary';\r\n    return classes;\r\n  }\r\n\r\n  getRemoveButtonClass() {\r\n    let classes = 'btn btn-primary btn-sm m-2 ';\r\n    classes += this.props.counter.value > 0 ? '' : 'disabled';\r\n    return classes;\r\n  }\r\n  formatCount() {\r\n    const { value } = this.props.counter;\r\n    return value === 0 ? 'Zero' : value;\r\n  }\r\n\r\n  render() {\r\n    console.log('Counter - render()');\r\n    return (\r\n      <div>\r\n        <div className=\"row\">\r\n          <div className=\"col col-1 m-2\">\r\n            <span className={this.getBadgeClasses()}>{this.formatCount()}</span>\r\n          </div>\r\n          <div className=\"col-md-auto\">\r\n            <button\r\n              onClick={() => this.props.onIncrement(this.props.counter)}\r\n              className=\"btn btn-primary btn-sm m-2\"\r\n            >\r\n              Add\r\n            </button>\r\n            <button\r\n              className={this.getRemoveButtonClass()}\r\n              onClick={() => this.props.onDecrement(this.props.counter)}\r\n            >\r\n              Remove\r\n            </button>\r\n            <button\r\n              onClick={() => this.props.onDelete(this.props.counter)}\r\n              className=\"btn btn-danger btn-sm m-2\"\r\n            >\r\n              Delete\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Counter;\r\n","import React, { Component } from 'react';\r\nimport Counter from './counter';\r\n\r\nclass Counters extends Component {\r\n  render() {\r\n    console.log('Counters - render()');\r\n    const { onReset, onAdd, onDelete, onIncrement, onDecrement, counters } = this.props;\r\n\r\n    return (\r\n      <div id=\"counters\">\r\n        <button onClick={onReset} className=\"btn btn-primary btn-sm m-2\">\r\n          Reset\r\n        </button>\r\n        <button onClick={onAdd} className=\"btn btn-primary btn-sm m-2\">\r\n          Add\r\n        </button>\r\n        {counters.map(counter => (\r\n          <Counter\r\n            key={counter.id}\r\n            onDelete={onDelete}\r\n            onIncrement={onIncrement}\r\n            onDecrement={onDecrement}\r\n            counter={counter}\r\n          />\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Counters;\r\n","import React from 'react';\r\n\r\n// Stateless functional component\r\nconst Navbar = ({ totalCounters, totalCount }) => {\r\n  console.log('Navbar - render()');\r\n  return (\r\n    <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\r\n      <a className=\"navbar-brand\" href=\"#\">\r\n        Counter App\r\n      </a>\r\n      <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\r\n        <ul className=\"navbar-nav\">\r\n          <li className=\"nav-item\">\r\n            <a className=\"nav-link\" href=\"#\">\r\n              Total Count: <span className=\"badge badge-pill badge-secondary\">{totalCount}</span>\r\n            </a>\r\n          </li>\r\n          <li className=\"nav-item\">\r\n            <a className=\"nav-link\" href=\"#\">\r\n              Total Counters:\r\n              <span className=\"badge badge-pill badge-secondary\">{totalCounters}</span>\r\n            </a>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n","import React, { Component } from 'react';\r\nimport Counters from './components/counters';\r\nimport Navbar from './components/navbar';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  state = {\r\n    counters: [{ id: 1, value: 0 }],\r\n    idIndex: 1,\r\n    totalCount: 0\r\n  };\r\n\r\n  componentDidMount() {\r\n    let totalCount = 0;\r\n    this.state.counters.forEach(counter => (totalCount += counter.value));\r\n    this.setState({ totalCount });\r\n  }\r\n\r\n  handleReset = () => {\r\n    const counters = this.state.counters.map(c => {\r\n      c.value = 0;\r\n      return c;\r\n    });\r\n    this.setState({ counters, totalCount: 0 });\r\n  };\r\n\r\n  handleIncrement = counter => {\r\n    const counters = [...this.state.counters];\r\n    const index = counters.indexOf(counter);\r\n    counters[index] = { ...counter };\r\n    counters[index].value++;\r\n    this.setState({ counters, totalCount: this.state.totalCount + 1 });\r\n  };\r\n\r\n  handleDecrement = counter => {\r\n    const counters = [...this.state.counters];\r\n    const index = counters.indexOf(counter);\r\n    counters[index] = { ...counter };\r\n    if (counters[index].value > 0) {\r\n      counters[index].value--;\r\n      this.setState({ counters, totalCount: this.state.totalCount - 1 });\r\n    }\r\n  };\r\n\r\n  handleDelete = counter => {\r\n    const counters = this.state.counters.filter(c => c.id !== counter.id);\r\n    this.setState({ counters, totalCount: this.state.totalCount - counter.value });\r\n  };\r\n\r\n  handleAdd = () => {\r\n    const counters = [...this.state.counters];\r\n    const idIndex = this.state.idIndex + 1;\r\n    counters.push({ id: idIndex, value: 0 });\r\n    this.setState({ counters, idIndex });\r\n  };\r\n\r\n  render() {\r\n    console.log('App - Rendered');\r\n    return (\r\n      <div className=\"App\">\r\n        <Navbar totalCounters={this.state.counters.length} totalCount={this.state.totalCount} />\r\n        <main className=\"container\">\r\n          <Counters\r\n            counters={this.state.counters}\r\n            onReset={this.handleReset}\r\n            onAdd={this.handleAdd}\r\n            onDelete={this.handleDelete}\r\n            onIncrement={this.handleIncrement}\r\n            onDecrement={this.handleDecrement}\r\n          />\r\n        </main>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}